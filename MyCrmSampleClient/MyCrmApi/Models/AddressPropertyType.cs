// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace MyCrmSampleClient.MyCrmApi.Models
{
    /// <summary> The AddressPropertyType. </summary>
    public readonly partial struct AddressPropertyType : IEquatable<AddressPropertyType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="AddressPropertyType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AddressPropertyType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AptUnitFlatValue = "AptUnitFlat";
        private const string BedsitterBachelorValue = "BedsitterBachelor";
        private const string BoardingHouseValue = "BoardingHouse";
        private const string CombiShopResidenceValue = "CombiShopResidence";
        private const string CommercialValue = "Commercial";
        private const string CompanyTitleUnitValue = "CompanyTitleUnit";
        private const string ConvertedCommercialPropertyValue = "ConvertedCommercialProperty";
        private const string ConvertedIndustrialPropertyValue = "ConvertedIndustrialProperty";
        private const string ConvertedMotelUnitsValue = "ConvertedMotelUnits";
        private const string ConvertedPropertyValue = "ConvertedProperty";
        private const string DisplayHomeValue = "DisplayHome";
        private const string DuplexValue = "Duplex";
        private const string FullyDetachedHouseValue = "FullyDetachedHouse";
        private const string GovtRentalGuaranteeValue = "GovtRentalGuarantee";
        private const string HobbyFarmValue = "HobbyFarm";
        private const string HolidayHomeValue = "HolidayHome";
        private const string HolidayRentalValue = "HolidayRental";
        private const string IndustrialValue = "Industrial";
        private const string InnerCityApartmentValue = "InnerCityApartment";
        private const string KitHomeValue = "KitHome";
        private const string LicencedBuilderHouseConstructionValue = "LicencedBuilderHouseConstruction";
        private const string LuxuryHouseValue = "LuxuryHouse";
        private const string LuxuryOtherValue = "LuxuryOther";
        private const string MultipleOnTitleValue = "MultipleOnTitle";
        private const string NewStrataTitleUnitValue = "NewStrataTitleUnit";
        private const string NursingHomeValue = "NursingHome";
        private const string OwnerBuilderHouseConstructionValue = "OwnerBuilderHouseConstruction";
        private const string PropertyDevelopmentValue = "PropertyDevelopment";
        private const string RelocatableHomeValue = "RelocatableHome";
        private const string RentalGuaranteeValue = "RentalGuarantee";
        private const string ResortUnitValue = "ResortUnit";
        private const string RetirementUnitValue = "RetirementUnit";
        private const string SemiDetachedHouseValue = "SemiDetachedHouse";
        private const string ServicedAptValue = "ServicedApt";
        private const string SingleBedroomLess50M2Value = "SingleBedroomLess50m2";
        private const string SnowleaseValue = "Snowlease";
        private const string StrataTitleUnitValue = "StrataTitleUnit";
        private const string StudentAccommodationValue = "StudentAccommodation";
        private const string StudioWarehouseAptValue = "StudioWarehouseApt";
        private const string TerraceValue = "Terrace";
        private const string TimeshareValue = "Timeshare";
        private const string TownhouseValue = "Townhouse";
        private const string TransportableHomeValue = "TransportableHome";
        private const string UnitStudentAccomValue = "UnitStudentAccom";
        private const string VacantLand2Value = "VacantLand2";
        private const string VillaValue = "Villa";
        private const string WarehouseConversionValue = "WarehouseConversion";
        private const string ProfChambersValue = "ProfChambers";
        private const string OfficesValue = "Offices";
        private const string FactoryValue = "Factory";
        private const string WarehouseValue = "Warehouse";
        private const string VacantLandValue = "VacantLand";
        private const string RetirementVillageValue = "RetirementVillage";
        private const string NonSpecialisedCommercialValue = "NonSpecialisedCommercial";
        private const string ResidentialCommercialValue = "ResidentialCommercial";
        private const string OtherValue = "Other";
        private const string Item8HectaresOrLessValue = "Item8HectaresOrLess";
        private const string Over8LessThan40HectaresValue = "Over8LessThan40Hectares";
        private const string Over40HectaresValue = "Over40Hectares";
        private const string NonSpecialisedIndustrialValue = "NonSpecialisedIndustrial";
        private const string LightIndustrialValue = "LightIndustrial";
        private const string Other2Value = "Other2";
        private const string AttachedUnitValue = "AttachedUnit";
        private const string GuaranteeValue = "Guarantee";
        private const string LandOnlyValue = "LandOnly";
        private const string LifestyleValue = "Lifestyle";
        private const string ResidentialLeaseholdValue = "ResidentialLeasehold";
        private const string StdResidentialValue = "StdResidential";
        private const string MaoriLandValue = "MaoriLand";
        private const string CrossLeaseValue = "CrossLease";

        /// <summary> AptUnitFlat. </summary>
        public static AddressPropertyType AptUnitFlat { get; } = new AddressPropertyType(AptUnitFlatValue);
        /// <summary> BedsitterBachelor. </summary>
        public static AddressPropertyType BedsitterBachelor { get; } = new AddressPropertyType(BedsitterBachelorValue);
        /// <summary> BoardingHouse. </summary>
        public static AddressPropertyType BoardingHouse { get; } = new AddressPropertyType(BoardingHouseValue);
        /// <summary> CombiShopResidence. </summary>
        public static AddressPropertyType CombiShopResidence { get; } = new AddressPropertyType(CombiShopResidenceValue);
        /// <summary> Commercial. </summary>
        public static AddressPropertyType Commercial { get; } = new AddressPropertyType(CommercialValue);
        /// <summary> CompanyTitleUnit. </summary>
        public static AddressPropertyType CompanyTitleUnit { get; } = new AddressPropertyType(CompanyTitleUnitValue);
        /// <summary> ConvertedCommercialProperty. </summary>
        public static AddressPropertyType ConvertedCommercialProperty { get; } = new AddressPropertyType(ConvertedCommercialPropertyValue);
        /// <summary> ConvertedIndustrialProperty. </summary>
        public static AddressPropertyType ConvertedIndustrialProperty { get; } = new AddressPropertyType(ConvertedIndustrialPropertyValue);
        /// <summary> ConvertedMotelUnits. </summary>
        public static AddressPropertyType ConvertedMotelUnits { get; } = new AddressPropertyType(ConvertedMotelUnitsValue);
        /// <summary> ConvertedProperty. </summary>
        public static AddressPropertyType ConvertedProperty { get; } = new AddressPropertyType(ConvertedPropertyValue);
        /// <summary> DisplayHome. </summary>
        public static AddressPropertyType DisplayHome { get; } = new AddressPropertyType(DisplayHomeValue);
        /// <summary> Duplex. </summary>
        public static AddressPropertyType Duplex { get; } = new AddressPropertyType(DuplexValue);
        /// <summary> FullyDetachedHouse. </summary>
        public static AddressPropertyType FullyDetachedHouse { get; } = new AddressPropertyType(FullyDetachedHouseValue);
        /// <summary> GovtRentalGuarantee. </summary>
        public static AddressPropertyType GovtRentalGuarantee { get; } = new AddressPropertyType(GovtRentalGuaranteeValue);
        /// <summary> HobbyFarm. </summary>
        public static AddressPropertyType HobbyFarm { get; } = new AddressPropertyType(HobbyFarmValue);
        /// <summary> HolidayHome. </summary>
        public static AddressPropertyType HolidayHome { get; } = new AddressPropertyType(HolidayHomeValue);
        /// <summary> HolidayRental. </summary>
        public static AddressPropertyType HolidayRental { get; } = new AddressPropertyType(HolidayRentalValue);
        /// <summary> Industrial. </summary>
        public static AddressPropertyType Industrial { get; } = new AddressPropertyType(IndustrialValue);
        /// <summary> InnerCityApartment. </summary>
        public static AddressPropertyType InnerCityApartment { get; } = new AddressPropertyType(InnerCityApartmentValue);
        /// <summary> KitHome. </summary>
        public static AddressPropertyType KitHome { get; } = new AddressPropertyType(KitHomeValue);
        /// <summary> LicencedBuilderHouseConstruction. </summary>
        public static AddressPropertyType LicencedBuilderHouseConstruction { get; } = new AddressPropertyType(LicencedBuilderHouseConstructionValue);
        /// <summary> LuxuryHouse. </summary>
        public static AddressPropertyType LuxuryHouse { get; } = new AddressPropertyType(LuxuryHouseValue);
        /// <summary> LuxuryOther. </summary>
        public static AddressPropertyType LuxuryOther { get; } = new AddressPropertyType(LuxuryOtherValue);
        /// <summary> MultipleOnTitle. </summary>
        public static AddressPropertyType MultipleOnTitle { get; } = new AddressPropertyType(MultipleOnTitleValue);
        /// <summary> NewStrataTitleUnit. </summary>
        public static AddressPropertyType NewStrataTitleUnit { get; } = new AddressPropertyType(NewStrataTitleUnitValue);
        /// <summary> NursingHome. </summary>
        public static AddressPropertyType NursingHome { get; } = new AddressPropertyType(NursingHomeValue);
        /// <summary> OwnerBuilderHouseConstruction. </summary>
        public static AddressPropertyType OwnerBuilderHouseConstruction { get; } = new AddressPropertyType(OwnerBuilderHouseConstructionValue);
        /// <summary> PropertyDevelopment. </summary>
        public static AddressPropertyType PropertyDevelopment { get; } = new AddressPropertyType(PropertyDevelopmentValue);
        /// <summary> RelocatableHome. </summary>
        public static AddressPropertyType RelocatableHome { get; } = new AddressPropertyType(RelocatableHomeValue);
        /// <summary> RentalGuarantee. </summary>
        public static AddressPropertyType RentalGuarantee { get; } = new AddressPropertyType(RentalGuaranteeValue);
        /// <summary> ResortUnit. </summary>
        public static AddressPropertyType ResortUnit { get; } = new AddressPropertyType(ResortUnitValue);
        /// <summary> RetirementUnit. </summary>
        public static AddressPropertyType RetirementUnit { get; } = new AddressPropertyType(RetirementUnitValue);
        /// <summary> SemiDetachedHouse. </summary>
        public static AddressPropertyType SemiDetachedHouse { get; } = new AddressPropertyType(SemiDetachedHouseValue);
        /// <summary> ServicedApt. </summary>
        public static AddressPropertyType ServicedApt { get; } = new AddressPropertyType(ServicedAptValue);
        /// <summary> SingleBedroomLess50m2. </summary>
        public static AddressPropertyType SingleBedroomLess50M2 { get; } = new AddressPropertyType(SingleBedroomLess50M2Value);
        /// <summary> Snowlease. </summary>
        public static AddressPropertyType Snowlease { get; } = new AddressPropertyType(SnowleaseValue);
        /// <summary> StrataTitleUnit. </summary>
        public static AddressPropertyType StrataTitleUnit { get; } = new AddressPropertyType(StrataTitleUnitValue);
        /// <summary> StudentAccommodation. </summary>
        public static AddressPropertyType StudentAccommodation { get; } = new AddressPropertyType(StudentAccommodationValue);
        /// <summary> StudioWarehouseApt. </summary>
        public static AddressPropertyType StudioWarehouseApt { get; } = new AddressPropertyType(StudioWarehouseAptValue);
        /// <summary> Terrace. </summary>
        public static AddressPropertyType Terrace { get; } = new AddressPropertyType(TerraceValue);
        /// <summary> Timeshare. </summary>
        public static AddressPropertyType Timeshare { get; } = new AddressPropertyType(TimeshareValue);
        /// <summary> Townhouse. </summary>
        public static AddressPropertyType Townhouse { get; } = new AddressPropertyType(TownhouseValue);
        /// <summary> TransportableHome. </summary>
        public static AddressPropertyType TransportableHome { get; } = new AddressPropertyType(TransportableHomeValue);
        /// <summary> UnitStudentAccom. </summary>
        public static AddressPropertyType UnitStudentAccom { get; } = new AddressPropertyType(UnitStudentAccomValue);
        /// <summary> VacantLand2. </summary>
        public static AddressPropertyType VacantLand2 { get; } = new AddressPropertyType(VacantLand2Value);
        /// <summary> Villa. </summary>
        public static AddressPropertyType Villa { get; } = new AddressPropertyType(VillaValue);
        /// <summary> WarehouseConversion. </summary>
        public static AddressPropertyType WarehouseConversion { get; } = new AddressPropertyType(WarehouseConversionValue);
        /// <summary> ProfChambers. </summary>
        public static AddressPropertyType ProfChambers { get; } = new AddressPropertyType(ProfChambersValue);
        /// <summary> Offices. </summary>
        public static AddressPropertyType Offices { get; } = new AddressPropertyType(OfficesValue);
        /// <summary> Factory. </summary>
        public static AddressPropertyType Factory { get; } = new AddressPropertyType(FactoryValue);
        /// <summary> Warehouse. </summary>
        public static AddressPropertyType Warehouse { get; } = new AddressPropertyType(WarehouseValue);
        /// <summary> VacantLand. </summary>
        public static AddressPropertyType VacantLand { get; } = new AddressPropertyType(VacantLandValue);
        /// <summary> RetirementVillage. </summary>
        public static AddressPropertyType RetirementVillage { get; } = new AddressPropertyType(RetirementVillageValue);
        /// <summary> NonSpecialisedCommercial. </summary>
        public static AddressPropertyType NonSpecialisedCommercial { get; } = new AddressPropertyType(NonSpecialisedCommercialValue);
        /// <summary> ResidentialCommercial. </summary>
        public static AddressPropertyType ResidentialCommercial { get; } = new AddressPropertyType(ResidentialCommercialValue);
        /// <summary> Other. </summary>
        public static AddressPropertyType Other { get; } = new AddressPropertyType(OtherValue);
        /// <summary> Item8HectaresOrLess. </summary>
        public static AddressPropertyType Item8HectaresOrLess { get; } = new AddressPropertyType(Item8HectaresOrLessValue);
        /// <summary> Over8LessThan40Hectares. </summary>
        public static AddressPropertyType Over8LessThan40Hectares { get; } = new AddressPropertyType(Over8LessThan40HectaresValue);
        /// <summary> Over40Hectares. </summary>
        public static AddressPropertyType Over40Hectares { get; } = new AddressPropertyType(Over40HectaresValue);
        /// <summary> NonSpecialisedIndustrial. </summary>
        public static AddressPropertyType NonSpecialisedIndustrial { get; } = new AddressPropertyType(NonSpecialisedIndustrialValue);
        /// <summary> LightIndustrial. </summary>
        public static AddressPropertyType LightIndustrial { get; } = new AddressPropertyType(LightIndustrialValue);
        /// <summary> Other2. </summary>
        public static AddressPropertyType Other2 { get; } = new AddressPropertyType(Other2Value);
        /// <summary> AttachedUnit. </summary>
        public static AddressPropertyType AttachedUnit { get; } = new AddressPropertyType(AttachedUnitValue);
        /// <summary> Guarantee. </summary>
        public static AddressPropertyType Guarantee { get; } = new AddressPropertyType(GuaranteeValue);
        /// <summary> LandOnly. </summary>
        public static AddressPropertyType LandOnly { get; } = new AddressPropertyType(LandOnlyValue);
        /// <summary> Lifestyle. </summary>
        public static AddressPropertyType Lifestyle { get; } = new AddressPropertyType(LifestyleValue);
        /// <summary> ResidentialLeasehold. </summary>
        public static AddressPropertyType ResidentialLeasehold { get; } = new AddressPropertyType(ResidentialLeaseholdValue);
        /// <summary> StdResidential. </summary>
        public static AddressPropertyType StdResidential { get; } = new AddressPropertyType(StdResidentialValue);
        /// <summary> MaoriLand. </summary>
        public static AddressPropertyType MaoriLand { get; } = new AddressPropertyType(MaoriLandValue);
        /// <summary> CrossLease. </summary>
        public static AddressPropertyType CrossLease { get; } = new AddressPropertyType(CrossLeaseValue);
        /// <summary> Determines if two <see cref="AddressPropertyType"/> values are the same. </summary>
        public static bool operator ==(AddressPropertyType left, AddressPropertyType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AddressPropertyType"/> values are not the same. </summary>
        public static bool operator !=(AddressPropertyType left, AddressPropertyType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="AddressPropertyType"/>. </summary>
        public static implicit operator AddressPropertyType(string value) => new AddressPropertyType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AddressPropertyType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AddressPropertyType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
