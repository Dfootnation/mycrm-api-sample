// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace MyCrmSampleClient.MyCrmApi.Models
{
    /// <summary> The IncomeVerificationEnum. </summary>
    public readonly partial struct IncomeVerificationEnum : IEquatable<IncomeVerificationEnum>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="IncomeVerificationEnum"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public IncomeVerificationEnum(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string CurrentPayslipsValue = "CurrentPayslips";
        private const string CurrentGroupCertificateValue = "CurrentGroupCertificate";
        private const string CurrentPersonalTaxReturnValue = "CurrentPersonalTaxReturn";
        private const string PreviousYearPersonalTaxReturnValue = "PreviousYearPersonalTaxReturn";
        private const string NoticeOfAssessmentValue = "NoticeOfAssessment";
        private const string CurrentCompanyTaxReturnValue = "CurrentCompanyTaxReturn";
        private const string PreviousCompanyTaxReturnValue = "PreviousCompanyTaxReturn";
        private const string LetterFromEmployerValue = "LetterFromEmployer";
        private const string EmploymentContractValue = "EmploymentContract";
        private const string BankAccountStatementValue = "BankAccountStatement";
        private const string OtherValue = "Other";

        /// <summary> CurrentPayslips. </summary>
        public static IncomeVerificationEnum CurrentPayslips { get; } = new IncomeVerificationEnum(CurrentPayslipsValue);
        /// <summary> CurrentGroupCertificate. </summary>
        public static IncomeVerificationEnum CurrentGroupCertificate { get; } = new IncomeVerificationEnum(CurrentGroupCertificateValue);
        /// <summary> CurrentPersonalTaxReturn. </summary>
        public static IncomeVerificationEnum CurrentPersonalTaxReturn { get; } = new IncomeVerificationEnum(CurrentPersonalTaxReturnValue);
        /// <summary> PreviousYearPersonalTaxReturn. </summary>
        public static IncomeVerificationEnum PreviousYearPersonalTaxReturn { get; } = new IncomeVerificationEnum(PreviousYearPersonalTaxReturnValue);
        /// <summary> NoticeOfAssessment. </summary>
        public static IncomeVerificationEnum NoticeOfAssessment { get; } = new IncomeVerificationEnum(NoticeOfAssessmentValue);
        /// <summary> CurrentCompanyTaxReturn. </summary>
        public static IncomeVerificationEnum CurrentCompanyTaxReturn { get; } = new IncomeVerificationEnum(CurrentCompanyTaxReturnValue);
        /// <summary> PreviousCompanyTaxReturn. </summary>
        public static IncomeVerificationEnum PreviousCompanyTaxReturn { get; } = new IncomeVerificationEnum(PreviousCompanyTaxReturnValue);
        /// <summary> LetterFromEmployer. </summary>
        public static IncomeVerificationEnum LetterFromEmployer { get; } = new IncomeVerificationEnum(LetterFromEmployerValue);
        /// <summary> EmploymentContract. </summary>
        public static IncomeVerificationEnum EmploymentContract { get; } = new IncomeVerificationEnum(EmploymentContractValue);
        /// <summary> BankAccountStatement. </summary>
        public static IncomeVerificationEnum BankAccountStatement { get; } = new IncomeVerificationEnum(BankAccountStatementValue);
        /// <summary> Other. </summary>
        public static IncomeVerificationEnum Other { get; } = new IncomeVerificationEnum(OtherValue);
        /// <summary> Determines if two <see cref="IncomeVerificationEnum"/> values are the same. </summary>
        public static bool operator ==(IncomeVerificationEnum left, IncomeVerificationEnum right) => left.Equals(right);
        /// <summary> Determines if two <see cref="IncomeVerificationEnum"/> values are not the same. </summary>
        public static bool operator !=(IncomeVerificationEnum left, IncomeVerificationEnum right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="IncomeVerificationEnum"/>. </summary>
        public static implicit operator IncomeVerificationEnum(string value) => new IncomeVerificationEnum(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is IncomeVerificationEnum other && Equals(other);
        /// <inheritdoc />
        public bool Equals(IncomeVerificationEnum other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
