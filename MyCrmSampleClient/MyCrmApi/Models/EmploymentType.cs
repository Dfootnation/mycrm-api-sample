// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace MyCrmSampleClient.MyCrmApi.Models
{
    /// <summary> The EmploymentType. </summary>
    public readonly partial struct EmploymentType : IEquatable<EmploymentType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="EmploymentType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public EmploymentType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string PaygValue = "PAYG";
        private const string SelfEmployedValue = "SelfEmployed";
        private const string UnemployedValue = "Unemployed";
        private const string RetiredValue = "Retired";
        private const string HomeDutiesValue = "HomeDuties";
        private const string StudentValue = "Student";

        /// <summary> PAYG. </summary>
        public static EmploymentType Payg { get; } = new EmploymentType(PaygValue);
        /// <summary> SelfEmployed. </summary>
        public static EmploymentType SelfEmployed { get; } = new EmploymentType(SelfEmployedValue);
        /// <summary> Unemployed. </summary>
        public static EmploymentType Unemployed { get; } = new EmploymentType(UnemployedValue);
        /// <summary> Retired. </summary>
        public static EmploymentType Retired { get; } = new EmploymentType(RetiredValue);
        /// <summary> HomeDuties. </summary>
        public static EmploymentType HomeDuties { get; } = new EmploymentType(HomeDutiesValue);
        /// <summary> Student. </summary>
        public static EmploymentType Student { get; } = new EmploymentType(StudentValue);
        /// <summary> Determines if two <see cref="EmploymentType"/> values are the same. </summary>
        public static bool operator ==(EmploymentType left, EmploymentType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="EmploymentType"/> values are not the same. </summary>
        public static bool operator !=(EmploymentType left, EmploymentType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="EmploymentType"/>. </summary>
        public static implicit operator EmploymentType(string value) => new EmploymentType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is EmploymentType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(EmploymentType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
