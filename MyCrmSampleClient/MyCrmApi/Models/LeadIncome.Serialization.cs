// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace MyCrmSampleClient.MyCrmApi.Models
{
    public partial class LeadIncome : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Lid))
            {
                if (Lid != null)
                {
                    writer.WritePropertyName("lid");
                    writer.WriteStringValue(Lid);
                }
                else
                {
                    writer.WriteNull("lid");
                }
            }
            if (Optional.IsDefined(IncomeTypeId))
            {
                if (IncomeTypeId != null)
                {
                    writer.WritePropertyName("incomeTypeId");
                    writer.WriteNumberValue(IncomeTypeId.Value);
                }
                else
                {
                    writer.WriteNull("incomeTypeId");
                }
            }
            if (Optional.IsDefined(Description))
            {
                if (Description != null)
                {
                    writer.WritePropertyName("description");
                    writer.WriteStringValue(Description);
                }
                else
                {
                    writer.WriteNull("description");
                }
            }
            if (Optional.IsDefined(Value))
            {
                if (Value != null)
                {
                    writer.WritePropertyName("value");
                    writer.WriteNumberValue(Value.Value);
                }
                else
                {
                    writer.WriteNull("value");
                }
            }
            if (Optional.IsDefined(Frequency))
            {
                writer.WritePropertyName("frequency");
                writer.WriteStringValue(Frequency.Value.ToString());
            }
            if (Optional.IsDefined(IncomeVerification))
            {
                writer.WritePropertyName("incomeVerification");
                writer.WriteStringValue(IncomeVerification.Value.ToString());
            }
            if (Optional.IsCollectionDefined(Ownership))
            {
                if (Ownership != null)
                {
                    writer.WritePropertyName("ownership");
                    writer.WriteStartArray();
                    foreach (var item in Ownership)
                    {
                        writer.WriteObjectValue(item);
                    }
                    writer.WriteEndArray();
                }
                else
                {
                    writer.WriteNull("ownership");
                }
            }
            if (Optional.IsDefined(Asset))
            {
                writer.WritePropertyName("asset");
                writer.WriteObjectValue(Asset);
            }
            if (Optional.IsDefined(Employment))
            {
                writer.WritePropertyName("employment");
                writer.WriteObjectValue(Employment);
            }
            writer.WriteEndObject();
        }

        internal static LeadIncome DeserializeLeadIncome(JsonElement element)
        {
            Optional<string> lid = default;
            Optional<int?> incomeTypeId = default;
            Optional<string> description = default;
            Optional<double?> value = default;
            Optional<Frequency> frequency = default;
            Optional<IncomeVerificationEnum> incomeVerification = default;
            Optional<IList<LeadContactReference>> ownership = default;
            Optional<LeadAssetReference> asset = default;
            Optional<LeadEmploymentReference> employment = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("lid"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        lid = null;
                        continue;
                    }
                    lid = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("incomeTypeId"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        incomeTypeId = null;
                        continue;
                    }
                    incomeTypeId = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("description"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        description = null;
                        continue;
                    }
                    description = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("value"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        value = null;
                        continue;
                    }
                    value = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("frequency"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    frequency = new Frequency(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("incomeVerification"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    incomeVerification = new IncomeVerificationEnum(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("ownership"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        ownership = null;
                        continue;
                    }
                    List<LeadContactReference> array = new List<LeadContactReference>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(LeadContactReference.DeserializeLeadContactReference(item));
                    }
                    ownership = array;
                    continue;
                }
                if (property.NameEquals("asset"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    asset = LeadAssetReference.DeserializeLeadAssetReference(property.Value);
                    continue;
                }
                if (property.NameEquals("employment"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    employment = LeadEmploymentReference.DeserializeLeadEmploymentReference(property.Value);
                    continue;
                }
            }
            return new LeadIncome(lid.Value, Optional.ToNullable(incomeTypeId), description.Value, Optional.ToNullable(value), Optional.ToNullable(frequency), Optional.ToNullable(incomeVerification), Optional.ToList(ownership), asset.Value, employment.Value);
        }
    }
}
