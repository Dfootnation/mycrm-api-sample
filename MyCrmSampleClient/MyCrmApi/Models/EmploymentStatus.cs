// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace MyCrmSampleClient.MyCrmApi.Models
{
    /// <summary> The EmploymentStatus. </summary>
    public readonly partial struct EmploymentStatus : IEquatable<EmploymentStatus>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="EmploymentStatus"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public EmploymentStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string PrimaryEmploymentValue = "PrimaryEmployment";
        private const string SecondaryEmploymentValue = "SecondaryEmployment";
        private const string PreviousEmploymentValue = "PreviousEmployment";

        /// <summary> PrimaryEmployment. </summary>
        public static EmploymentStatus PrimaryEmployment { get; } = new EmploymentStatus(PrimaryEmploymentValue);
        /// <summary> SecondaryEmployment. </summary>
        public static EmploymentStatus SecondaryEmployment { get; } = new EmploymentStatus(SecondaryEmploymentValue);
        /// <summary> PreviousEmployment. </summary>
        public static EmploymentStatus PreviousEmployment { get; } = new EmploymentStatus(PreviousEmploymentValue);
        /// <summary> Determines if two <see cref="EmploymentStatus"/> values are the same. </summary>
        public static bool operator ==(EmploymentStatus left, EmploymentStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="EmploymentStatus"/> values are not the same. </summary>
        public static bool operator !=(EmploymentStatus left, EmploymentStatus right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="EmploymentStatus"/>. </summary>
        public static implicit operator EmploymentStatus(string value) => new EmploymentStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is EmploymentStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(EmploymentStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
