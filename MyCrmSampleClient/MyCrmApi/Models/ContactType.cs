// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace MyCrmSampleClient.MyCrmApi.Models
{
    /// <summary> The ContactType. </summary>
    internal readonly partial struct ContactType : IEquatable<ContactType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ContactType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ContactType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string LeadValue = "Lead";
        private const string ApplicationValue = "Application";
        private const string ExistingClientValue = "ExistingClient";
        private const string ProfessionalPartnerValue = "ProfessionalPartner";
        private const string PreviousClientValue = "PreviousClient";
        private const string OpportunityValue = "Opportunity";
        private const string NewClientValue = "NewClient";

        /// <summary> Lead. </summary>
        public static ContactType Lead { get; } = new ContactType(LeadValue);
        /// <summary> Application. </summary>
        public static ContactType Application { get; } = new ContactType(ApplicationValue);
        /// <summary> ExistingClient. </summary>
        public static ContactType ExistingClient { get; } = new ContactType(ExistingClientValue);
        /// <summary> ProfessionalPartner. </summary>
        public static ContactType ProfessionalPartner { get; } = new ContactType(ProfessionalPartnerValue);
        /// <summary> PreviousClient. </summary>
        public static ContactType PreviousClient { get; } = new ContactType(PreviousClientValue);
        /// <summary> Opportunity. </summary>
        public static ContactType Opportunity { get; } = new ContactType(OpportunityValue);
        /// <summary> NewClient. </summary>
        public static ContactType NewClient { get; } = new ContactType(NewClientValue);
        /// <summary> Determines if two <see cref="ContactType"/> values are the same. </summary>
        public static bool operator ==(ContactType left, ContactType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ContactType"/> values are not the same. </summary>
        public static bool operator !=(ContactType left, ContactType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ContactType"/>. </summary>
        public static implicit operator ContactType(string value) => new ContactType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ContactType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ContactType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
