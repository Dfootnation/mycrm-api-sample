// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace MyCrmSampleClient.MyCrmApi.Models
{
    /// <summary> The CountryCode. </summary>
    internal readonly partial struct CountryCode : IEquatable<CountryCode>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="CountryCode"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public CountryCode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NZValue = "NZ";
        private const string AUValue = "AU";
        private const string IDValue = "ID";

        /// <summary> NZ. </summary>
        public static CountryCode NZ { get; } = new CountryCode(NZValue);
        /// <summary> AU. </summary>
        public static CountryCode AU { get; } = new CountryCode(AUValue);
        /// <summary> ID. </summary>
        public static CountryCode ID { get; } = new CountryCode(IDValue);
        /// <summary> Determines if two <see cref="CountryCode"/> values are the same. </summary>
        public static bool operator ==(CountryCode left, CountryCode right) => left.Equals(right);
        /// <summary> Determines if two <see cref="CountryCode"/> values are not the same. </summary>
        public static bool operator !=(CountryCode left, CountryCode right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="CountryCode"/>. </summary>
        public static implicit operator CountryCode(string value) => new CountryCode(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is CountryCode other && Equals(other);
        /// <inheritdoc />
        public bool Equals(CountryCode other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
